<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chord Transposer</title>
  <link rel="icon" type="image/x-icon" href="/chords/favicon.png">

  <style>
    :root {
      --accent: #5CB9FF;
      --bg: #2e2e2e;
      --text: #eaeaea;
    }

    body {
      font-family: system-ui, sans-serif;
      max-width: 900px;
      margin: 2rem auto;
      padding: 1rem;
      background: var(--bg);
      color: var(--text);
    }

    h1 {
      color: var(--accent);
      text-align: center;
      font-size: clamp(1.5rem, 4vw, 2.2rem);
      margin-bottom: 0.5rem;
    }

    p {
      color: var(--accent);
      text-align: center;
      font-size: 1rem;
      margin-bottom: 1rem;
    }

    input[type="text"] {
      width: 96%;
      padding: 0.5rem;
      margin-bottom: 1rem;
      margin-left: auto;
      margin-right: auto;
      display: block;
      font-size: 1.1rem;
      border: 1px solid #444;
      border-radius: 6px;
      background: #1e1e1e;
      color: #e0e0e0;
    }

    textarea {
      width: 94%;
      min-height: 220px;
      font-family: monospace;
      padding: 0.75rem;
      margin-bottom: 1rem;
      margin-left: auto;
      margin-right: auto;
      display: block;
      border: 1px solid #444;
      border-radius: 8px;
      resize: vertical;
      background: #1e1e1e;
      color: #e0e0e0;
    }

    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;
      margin-bottom: 1rem;
    }

    button {
      flex: 1 1 100px;
      background: #4da3ff;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 0.6rem 1rem;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
    }

    button:hover {
      background: #1e90ff;
    }

    button:active {
      transform: scale(0.97);
    }

    #previewContainer {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #output {
      white-space: pre-wrap;
      font-family: monospace;
      line-height: 1.5;
      color: #000;
      overflow-wrap: break-word;
      word-break: break-word;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      border-radius: 4px;
      transition: all 0.2s ease;
      background: #fff;
      aspect-ratio: 8.5 / 11;
      width: 100%;
      max-width: 816px; /* 8.5in * 96dpi */
      height: auto;
      overflow-y: auto;
      border: 1px solid #ccc;
    }

    strong {
      font-weight: 700;
      color: #004685;
      border-radius: 4px;
      padding: 0 2px;
    }

    /* 📱 Responsive adjustments */
    @media (max-width: 600px) {
      body {
        padding: 0.5rem;
      }

      textarea {
        font-size: 0.95rem;
        height: 180px;
      }

      .controls {
        flex-direction: row;
        justify-content: space-between;
      }

      button {
        flex: 1 1 45%;
        font-size: 0.9rem;
        padding: 0.5rem;
      }
    }
  </style>
</head>

<body>
  <h1>Chord Transposer</h1>
  <p>Paste your lyrics and chords below, then click to transpose or change notation.</p>

  <input id="songTitle" type="text" placeholder="Song title..." oninput="updateOutput()" />

  <textarea id="input" placeholder="Paste your song here..."></textarea>

  <div class="controls">
    <button onclick="transposeDown()">-</button>
    <button onclick="transposeUp()">+</button>
    <button id="toggleFlats" onclick="toggleFlats()">Show ♭</button>
    <button onclick="exportTXT()">Save .TXT</button>
    <button onclick="exportPDF()">Save PDF</button>
  </div>

  <!-- 🎛️ Settings -->
  <details style="margin-bottom: 1rem; background:#1e1e1e; padding:1rem; border-radius:8px;">
    <summary style="cursor:pointer; color:#5CB9FF; font-weight:bold;">PDF & Detection Settings</summary>
    <div style="margin-top:0.5rem;">
      <label>Title Font Size: 
        <input type="number" id="titleFontSize" value="14" min="8" max="36" style="width:60px;">
      </label><br>
      <label>Body Font Size: 
        <input type="number" id="bodyFontSize" value="10" min="6" max="24" style="width:60px;">
      </label><br>
      <label>PDF Margin (pt): 
        <input type="number" id="pdfMargin" value="40" min="10" max="100" style="width:60px;">
      </label><br>
      <label>Chord Detection Threshold: 
        <input type="range" id="chordThreshold" min="0" max="1" step="0.05" value="0.4" 
               oninput="document.getElementById('thresholdVal').textContent=this.value">
        <span id="thresholdVal">0.4</span>
      </label><br>
    </div>
  </details>

  <div id="previewContainer">
    <div id="output"></div>
  </div>

<script>
const NOTES_SHARP = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];
const NOTES_FLAT  = ["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"];

let useFlatsDisplay = false;
let currentTranspose = 0;
let chordThreshold = 0.4;

const CHORD_REGEX = /\b([A-G](?:#|b)?)([^\s]*)/g;

function transposeNote(note, steps) {
  const idxSharp = NOTES_SHARP.indexOf(note);
  const idxFlat  = NOTES_FLAT.indexOf(note);
  const idx = idxSharp !== -1 ? idxSharp : idxFlat;
  if (idx === -1) return note;
  const newSharp = NOTES_SHARP[(idx + steps + 12) % 12];
  const newFlat  = NOTES_FLAT[(idx + steps + 12) % 12];
  return useFlatsDisplay ? newFlat : newSharp;
}

function transposeChord(chord, steps) {
  return chord.replace(/^([A-G](?:#|b)?)(.*)$/, (_, root, rest) => {
    const newRoot = transposeNote(root, steps);
    const slashMatch = rest.match(/\/([A-G](?:#|b)?)(?!\d)/);
    if (slashMatch) {
      const bass = slashMatch[1];
      const transposedBass = transposeNote(bass, steps);
      rest = rest.replace("/" + bass, "/" + transposedBass);
    }
    return newRoot + rest;
  });
}

function transposeText(text, steps) {
  return text.replace(CHORD_REGEX, chord => transposeChord(chord, steps));
}

function highlightChords(text) {
  return text.replace(CHORD_REGEX, match => `<strong>${match}</strong>`);
}

function updateOutput() {
  const title = document.getElementById("songTitle").value.trim();
  const input = document.getElementById("input").value;
  const lines = input.split(/\n/);

  const out = lines.map(line => {
    const tokens = line.trim().split(/\s+/);
    if (!tokens.length) return line;
    const chordCount = tokens.filter(w => /^[A-G](?:#|b)?/.test(w)).length;
    if (chordCount / tokens.length >= chordThreshold) {
      return highlightChords(transposeText(line, currentTranspose));
    }
    return line;
  }).join("\n");

  const titleFontSize = parseFloat(document.getElementById("titleFontSize").value);
  const bodyFontSize = parseFloat(document.getElementById("bodyFontSize").value);
  const margin = parseFloat(document.getElementById("pdfMargin").value);

  const titleHTML = title
    ? `<h2 style="text-align:center; color:#5CB9FF; margin-top:0; font-size:${titleFontSize}px;">${title}</h2>\n`
    : "";

  const outputDiv = document.getElementById("output");
  outputDiv.innerHTML = titleHTML + out;
  outputDiv.style.fontSize = bodyFontSize + "px";
  outputDiv.style.padding = (margin * (96 / 72)) + "px"; // convert pt -> px for realistic display
  outputDiv.style.background = showBackground ? "#fff" : "transparent";
  outputDiv.style.boxShadow = showBackground ? "0 0 10px rgba(0,0,0,0.3)" : "none";
  outputDiv.style.border = showBackground ? "1px solid #ccc" : "none";
}

function transposeUp() { currentTranspose++; updateOutput(); }
function transposeDown() { currentTranspose--; updateOutput(); }
function toggleFlats() {
  useFlatsDisplay = !useFlatsDisplay;
  updateOutput();
  document.getElementById("toggleFlats").textContent = useFlatsDisplay ? "Show ♯" : "Show ♭";
}

document.getElementById("input").addEventListener("input", updateOutput);

// --- Settings persistence and live updates ---
function loadSettings() {
  const settings = JSON.parse(localStorage.getItem("transposerSettings") || "{}");
  if (settings.titleFontSize) document.getElementById("titleFontSize").value = settings.titleFontSize;
  if (settings.bodyFontSize) document.getElementById("bodyFontSize").value = settings.bodyFontSize;
  if (settings.pdfMargin) document.getElementById("pdfMargin").value = settings.pdfMargin;
  if (settings.chordThreshold !== undefined) {
    document.getElementById("chordThreshold").value = settings.chordThreshold;
    document.getElementById("thresholdVal").textContent = settings.chordThreshold;
    chordThreshold = parseFloat(settings.chordThreshold);
  }
  }

function saveSettings() {
  const settings = {
    titleFontSize: document.getElementById("titleFontSize").value,
    bodyFontSize: document.getElementById("bodyFontSize").value,
    pdfMargin: document.getElementById("pdfMargin").value,
    chordThreshold: document.getElementById("chordThreshold").value,
  };
  localStorage.setItem("transposerSettings", JSON.stringify(settings));
}

document.querySelectorAll("#titleFontSize,#bodyFontSize,#pdfMargin").forEach(el => {
  el.addEventListener("input", () => {
    saveSettings();
    updateOutput();
  });
});

document.getElementById("chordThreshold").addEventListener("input", e => {
  chordThreshold = parseFloat(e.target.value);
  document.getElementById("thresholdVal").textContent = e.target.value;
  saveSettings();
  updateOutput();
});

loadSettings();
updateOutput();
</script>

<!-- Save TXT -->
<script>
function exportTXT() {
  const title = document.getElementById("songTitle").value.trim();
  const text = (title ? title + "\n\n" : "") + document.getElementById("output").innerText;
  const blob = new Blob([text], { type: "text/plain" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "transposed_chords.txt";
  link.click();
}
</script>

<!-- jsPDF -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
async function exportPDF() {
  const { jsPDF } = window.jspdf;
  const pdf = new jsPDF({ orientation: "portrait", unit: "pt", format: "letter" });

  const margin = parseFloat(document.getElementById("pdfMargin").value);
  const titleFontSize = parseFloat(document.getElementById("titleFontSize").value);
  const bodyFontSize = parseFloat(document.getElementById("bodyFontSize").value);
  const lineHeight = bodyFontSize * 1.6;
  const maxWidth = 8.5 * 72 - margin * 2;

  async function loadFont(path) {
    const res = await fetch(path);
    if (!res.ok) throw new Error("Failed to load font: " + path);
    const buffer = await res.arrayBuffer();
    return btoa(String.fromCharCode(...new Uint8Array(buffer)));
  }

  try {
    const [regular, bold] = await Promise.all([
      loadFont("DejaVuSansMono.ttf"),
      loadFont("DejaVuSansMono-Bold.ttf")
    ]);

    pdf.addFileToVFS("DejaVuSansMono.ttf", regular);
    pdf.addFont("DejaVuSansMono.ttf", "DejaVuSansMono", "normal");

    pdf.addFileToVFS("DejaVuSansMono-Bold.ttf", bold);
    pdf.addFont("DejaVuSansMono-Bold.ttf", "DejaVuSansMono", "bold");

    pdf.setFont("DejaVuSansMono", "normal");
  } catch (err) {
    console.error(err);
    alert("Could not load DejaVu fonts — using default font instead.");
  }

  const title = document.getElementById("songTitle").value.trim();
  let y = margin;

  if (title) {
    pdf.setFont("DejaVuSansMono", "bold");
    pdf.setFontSize(titleFontSize);
    const titleWidth = pdf.getTextWidth(title);
    const pageWidth = pdf.internal.pageSize.getWidth();
    pdf.text(title, (pageWidth - titleWidth) / 2, y);
    y += titleFontSize * 1.8;
  }

  pdf.setFont("DejaVuSansMono", "normal");
  pdf.setFontSize(bodyFontSize);

  const container = document.createElement("div");
  const outputClone = document.getElementById("output").cloneNode(true);
  const h2 = outputClone.querySelector("h2");
  if (h2) h2.remove();
  container.innerHTML = outputClone.innerHTML;

  const charWidth = pdf.getTextWidth("M");

  container.innerHTML.split(/\n/).forEach(lineHTML => {
    const temp = document.createElement("div");
    temp.innerHTML = lineHTML;
    let x = margin;

    Array.from(temp.childNodes).forEach(part => {
      const text = part.textContent || "";
      if (!text) return;

      for (let ch of text) {
        if (ch === "\n") { y += lineHeight; x = margin; continue; }
        if (x > maxWidth) { y += lineHeight; x = margin; }
        if (y > 11 * 72 - margin) { pdf.addPage(); y = margin; }

        pdf.setFont("DejaVuSansMono", part.nodeName === "STRONG" ? "bold" : "normal");
        pdf.text(ch, x, y);
        x += charWidth;
      }
    });
    y += lineHeight;
  });

  pdf.save("transposed_chords.pdf");
}
</script>
</body>
</html>

